<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Meeting Room</title>
  <link rel="stylesheet" href="/css/meetingStyle.css">
  <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
  <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
  <style>
    video {
      width: 100%;
      height: auto;
    }
  </style>
</head>
<body>
  <h1>Meeting Room</h1>
  <div id="video-grid"></div>
  <textarea id="chat-message" placeholder="Type your message..."></textarea>
  <button onclick="sendMessage()">Send</button>
  <div id="chat"></div>
  <button id="share-screen">Share Screen</button>
  <script>
    const ROOM_ID = 'your-room-id'; // Replace with your actual room ID
    const socket = io();
    const videoGrid = document.getElementById('video-grid');
    const myVideo = document.createElement('video');
    myVideo.muted = true;

    let myStream;

    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then(stream => {
      myStream = stream;
      addVideoStream(myVideo, stream);

      socket.emit('join-meeting', ROOM_ID);

      socket.on('user-connected', userId => {
        connectToNewUser(userId, stream);
      });
    }).catch(err => {
      console.error('Error accessing media devices:', err);
    });

    socket.on('chat-message', message => {
      const chat = document.getElementById('chat');
      chat.innerHTML += `<p>${message}</p>`;
    });

    document.getElementById('share-screen').addEventListener('click', () => {
      navigator.mediaDevices.getDisplayMedia({
        video: true
      }).then(screenStream => {
        addVideoStream(document.createElement('video'), screenStream);
        socket.emit('share-screen', ROOM_ID, screenStream.id);
      }).catch(err => {
        console.error('Error sharing screen:', err);
      });
    });

    function addVideoStream(video, stream) {
      video.srcObject = stream;
      video.addEventListener('loadedmetadata', () => {
        video.play();
      });
      videoGrid.append(video);
    }

    function connectToNewUser(userId, stream) {
      const call = peer.call(userId, stream); // Ensure 'peer' is properly initialized
      const video = document.createElement('video');
      call.on('stream', userVideoStream => {
        addVideoStream(video, userVideoStream);
      });
    }

    function sendMessage() {
      const message = document.getElementById('chat-message').value;
      socket.emit('send-chat-message', ROOM_ID, message);
      document.getElementById('chat-message').value = '';
    }

    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
    }
  </script>
</body>
</html>
